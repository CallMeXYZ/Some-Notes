opengl es (for embedded systems )
support by both sdk and ndk

GLSurfaceView,GLSurfaceView.Renderer
create own renderer and glsurfaceview.setrenderer
onSurfaceCreated() onDrawFrame() onSurfaceChanged()

TextTure compressing?

2d or 3d point called vertices
has a front face and back face
a feature face culling : ignore the back face of a shape to save time 
	// enable face culling feature
	gl.glEnable(GL10.GL_CULL_FACE);
	// specify which faces to not draw
	gl.glCullFace(GL10.GL_BACK);
so had better to draw in a counterclockwise order 

versions backward compatible,so u can potentially write app targeting version 2.0 and conditionally include 3.x features if available 

texture compressing
ETC1 ETC1Util class and etc1tool
note: etc1 is not guaranteed to be available on all devices check by  ETC1Util.isETC1Supported()
      etc1 texture compressing format does not support transparency
declare in ur manifest <supports-gl-texture> 
in 3.x ETC2 is guaranteed and transparency is also supported;

Android Extension Pack
<uses feature android:name="android.hardware.opengles.aep"
              android:required="true" />
boolean deviceSupportsAEP = getPackageManager().hasSystemFeature(PackageManager.FEATURE_OPENGLES_EXTENSION_PACK);

checking OpenGL Version
1. try to create higher GL context if return null then try lower ones
2.create a minimum context first and then check the version string 
	javax.microedition.khronos.opengles.GL10.glGetString(GL10.GL_VERSION)
	
Environment :OpenGLSurfaceView as a container: for tiny containers try TextureViewï¼Œor u can custom from surface
             renderer
	2.0 is suggested for current devices
1. add permission
<uses-feature android:glEsVersion="0x00020000" android:required="true" />
if use texture compressing add
<supports-gl-texture android:name="GL_OES_compressed_ETC1_RGB8_texture" />
<supports-gl-texture android:name="GL_OES_compressed_paletted_texture" />
2. add to an activitys
mGLView = new MyGLSurfaceView(this);
setContentView(mGLView);
3.extend GLSurfaceView to capture touch events;

class MyGLSurfaceView extends GLSurfaceView {

    private final MyGLRenderer mRenderer;

    public MyGLSurfaceView(Context context){
        super(context);

        // Create an OpenGL ES 2.0 context
        setEGLContextClientVersion(2);

        mRenderer = new MyGLRenderer();

        // Set the Renderer for drawing on the GLSurfaceView
        setRenderer(mRenderer);
    }
}
// Render the view only when there is a change in the drawing data
setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);

		